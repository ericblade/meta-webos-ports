From dc5ce7c82b5fadc2dd15859b36db50b0fb273f71 Mon Sep 17 00:00:00 2001
From: Christophe Chapuis <chris.chapuis@gmail.com>
Date: Wed, 21 Jun 2023 19:52:45 +0200
Subject: [PATCH] Fix build with Qt 6.5

* fixes:
../../../git/src/plugin/declarativedbusinterface.cpp: In member function 'void DeclarativeDBusInterface::signalHandler(const QDBusMessage&)':
../../../git/src/plugin/declarativedbusinterface.cpp:856:19: error: no match for 'operator=' (operand types are 'QGenericArgument' and 'QMetaMethodArgument')
  856 |         args[i] = Q_ARG(QVariant, arg);
      |                   ^~~~~

Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
Upstream-Status: Pending
---
 src/plugin/declarativedbusinterface.cpp | 22 +++++++++++++---------
 1 file changed, 13 insertions(+), 9 deletions(-)

diff --git a/src/plugin/declarativedbusinterface.cpp b/src/plugin/declarativedbusinterface.cpp
index 451d9c0..fed1869 100644
--- a/src/plugin/declarativedbusinterface.cpp
+++ b/src/plugin/declarativedbusinterface.cpp
@@ -844,24 +844,28 @@ void DeclarativeDBusInterface::signalHandler(const QDBusMessage &message)
     QVariantList arguments = message.arguments();
     QVariantList normalized;
 
-    QGenericArgument args[10];
-
     for (int i = 0; i < qMin(arguments.length(), 10); ++i) {
         const QVariant &tmp = arguments.at(i);
         normalized.append(NemoDBus::demarshallDBusArgument(tmp));
     }
 
-    for (int i = 0; i < normalized.count(); ++i) {
-        const QVariant &arg = normalized.at(i);
-        args[i] = Q_ARG(QVariant, arg);
-    }
-
     QMetaMethod method = m_signals.value(message.member());
     if (!method.isValid())
         return;
 
-    method.invoke(this, args[0], args[1], args[2], args[3], args[4],
-                  args[5], args[6], args[7], args[8], args[9]);
+    switch (arguments.length()) {
+        case  0: method.invoke(this); break;
+        case  1: method.invoke(this, normalized.at(0)); break;
+        case  2: method.invoke(this, normalized.at(0), normalized.at(1)); break;
+        case  3: method.invoke(this, normalized.at(0), normalized.at(1), normalized.at(2)); break;
+        case  4: method.invoke(this, normalized.at(0), normalized.at(1), normalized.at(2), normalized.at(3)); break;
+        case  5: method.invoke(this, normalized.at(0), normalized.at(1), normalized.at(2), normalized.at(3), normalized.at(4)); break;
+        case  6: method.invoke(this, normalized.at(0), normalized.at(1), normalized.at(2), normalized.at(3), normalized.at(4), normalized.at(5)); break;
+        case  7: method.invoke(this, normalized.at(0), normalized.at(1), normalized.at(2), normalized.at(3), normalized.at(4), normalized.at(5), normalized.at(6)); break;
+        case  8: method.invoke(this, normalized.at(0), normalized.at(1), normalized.at(2), normalized.at(3), normalized.at(4), normalized.at(5), normalized.at(6), normalized.at(7)); break;
+        case  9: method.invoke(this, normalized.at(0), normalized.at(1), normalized.at(2), normalized.at(3), normalized.at(4), normalized.at(5), normalized.at(6), normalized.at(7), normalized.at(8)); break;
+        case 10: method.invoke(this, normalized.at(0), normalized.at(1), normalized.at(2), normalized.at(3), normalized.at(4), normalized.at(5), normalized.at(6), normalized.at(7), normalized.at(8), normalized.at(9)); break;
+    }
 }
 
 static int indexOfMangledName(const QString &name, const QStringList &candidates)
