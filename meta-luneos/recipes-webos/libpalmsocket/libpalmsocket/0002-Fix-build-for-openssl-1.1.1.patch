From 96c7941fd379b91c172f3034f39af93715da5d1d Mon Sep 17 00:00:00 2001
From: Christophe Chapuis <chris.chapuis@gmail.com>
Date: Sat, 11 May 2019 18:05:35 +0000
Subject: [PATCH] Fix build for openssl-1.1.1

Signed-off-by: Christophe Chapuis <chris.chapuis@gmail.com>
Upstream-Status: Pending
---
 src/psl_channel_fsm_crypto.c | 29 +++++++++++++++--------------
 src/psl_openssl_utils.c      | 20 ++++++++++----------
 2 files changed, 25 insertions(+), 24 deletions(-)

diff --git a/src/psl_channel_fsm_crypto.c b/src/psl_channel_fsm_crypto.c
index ffef8db..f5cb597 100644
--- a/src/psl_channel_fsm_crypto.c
+++ b/src/psl_channel_fsm_crypto.c
@@ -1558,7 +1558,7 @@ crypto_do_renegotiate(PslChanFsmCryptoRenegotiateState*     const pState,
         "%s (fsm=%p): ENTERING: pState=%p, pFdWatch=%p, " \
         "PslChanFsmCryptoRenegPhase=%d, pState->PslError=%d, openSSL state=%d (%s)",
         __func__, pFsm, pState, pFdWatch, (int)pState->phase, pState->pslerr,
-        SSL_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
+        SSL_get_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
 
     #if 0
     PSL_ASSERT(!pFdWatch || (pFdWatch->numrecs <= 1));
@@ -1621,7 +1621,8 @@ crypto_do_renegotiate(PslChanFsmCryptoRenegotiateState*     const pState,
                               "wait for completion of renegotiation " \
                               "handshake per kPmSockRenegOpt_waitForClientHandshake",
                               __func__, pFsm);
-                sslInfo->ssl->state = SSL_ST_ACCEPT;
+                SSL_set_accept_state(sslInfo->ssl);
+                //sslInfo->ssl->state = SSL_ST_ACCEPT;
                 pState->phase = kPslChanFsmCryptoRenegPhase_handshake;
             }
 
@@ -1659,7 +1660,7 @@ crypto_do_renegotiate(PslChanFsmCryptoRenegotiateState*     const pState,
         "pState->PslError=%d (%s), openSSL state=%d (%s)",
         __func__, pFsm, (int)isDone, (int)pState->phase, pState->pslerr,
         PmSockErrStringFromError(pState->pslerr),
-        SSL_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
+        SSL_get_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
 
     return isDone;
 }//crypto_do_renegotiate
@@ -1683,7 +1684,7 @@ crypto_start_renegotiation(PslChanFsm* pFsm)
     const PslChanFsmCryptoSharedInfo* const sslInfo = crypto_shared_info(pFsm);
 
     PSL_LOG_DEBUG("%s (fsm=%p): ENTERING: openSSL state=%d (%s)", __func__, pFsm,
-                  SSL_state(sslInfo->ssl),
+                  SSL_get_state(sslInfo->ssl),
                   SSL_state_string_long(sslInfo->ssl));
 
 
@@ -1709,7 +1710,7 @@ crypto_start_renegotiation(PslChanFsm* pFsm)
 
     PSL_LOG_DEBUG("%s (fsm=%p): LEAVING: PslError=%d (%s), openSSL state=%d (%s)",
                   __func__, pFsm, pslerr, PmSockErrStringFromError(pslerr),
-                  SSL_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
+                  SSL_get_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
     return pslerr;
 }//crypto_start_renegotiation
 
@@ -1728,7 +1729,7 @@ crypto_do_SSL_handshake(PslChanFsm*                const pFsm,
     const PslChanFsmCryptoSharedInfo* const sslInfo = crypto_shared_info(pFsm);
 
     PSL_LOG_DEBUG("%s (fsm=%p): ENTERING: connKind=%d, openSSL state=%d (%s)",
-                  __func__, pFsm, (int)sslInfo->connKind, SSL_state(sslInfo->ssl),
+                  __func__, pFsm, (int)sslInfo->connKind, SSL_get_state(sslInfo->ssl),
                   SSL_state_string_long(sslInfo->ssl));
 
     *pPslErr = 0;
@@ -1789,7 +1790,7 @@ crypto_do_SSL_handshake(PslChanFsm*                const pFsm,
     PSL_LOG_DEBUG("%s (fsm=%p): LEAVING: handshakeFinished=%d, PslError=%d (%s), " \
                   "openSSL state=%d (%s)",
                   __func__, pFsm, (int)handshakeFinished, *pPslErr,
-                  PmSockErrStringFromError(*pPslErr), SSL_state(sslInfo->ssl),
+                  PmSockErrStringFromError(*pPslErr), SSL_get_state(sslInfo->ssl),
                   SSL_state_string_long(sslInfo->ssl));
 
     return handshakeFinished;
@@ -1831,7 +1832,7 @@ crypto_ssl_peer_verify_callback(int                   preverify_ok,
             "%s (fsm=%p): Detected start of a new verification session: " \
             "first_verify_session=%d, openSSL state=%d (%s)", __func__, pFsm,
             (int)!sslInfo->pv.peerVerifyCalled,
-            SSL_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
+            SSL_get_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
         sslInfo->pv.verifyInProgress = true;
     }
 
@@ -1948,7 +1949,7 @@ crypto_ssl_peer_verify_callback(int                   preverify_ok,
         PSL_LOG_DEBUG(
             "%s (fsm=%p): Detected end of verification session: " \
             "openSSL state=%d (%s)", __func__, pFsm,
-            SSL_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
+            SSL_get_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
     }
 
     PSL_LOG_DEBUG("%s (fsm=%p): LEAVING: preverify_ok=%d, PslError=%d (%s), " \
@@ -2018,7 +2019,7 @@ crypto_resolve_peer_cert_error(PslChanFsm*     const pFsm,
 
         bool foundMatchingCert;
         PslError const pslerr = PmSockOpensslMatchCertInStore(
-            x509_ctx, x509_ctx->cert, 0/*opts*/, &foundMatchingCert);
+            x509_ctx, X509_STORE_CTX_get_current_cert(x509_ctx), 0/*opts*/, &foundMatchingCert);
         if (pslerr) {
             foundMatchingCert = false;
         }
@@ -3011,7 +3012,7 @@ crypto_read_low(PslChanFsm* const pFsm,
 
     PSL_LOG_DEBUG("%s (fsm=%p): ENTERING: requested cnt=%d, deferredIOAllowed=%d, " \
                   "openSSL state=%d (%s)", __func__, pFsm, cnt, (int)deferredIOAllowed,
-                  SSL_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
+                  SSL_get_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
 
     PSL_ASSERT(pDst || !cnt);
     PSL_ASSERT(cnt >= 0);
@@ -3170,7 +3171,7 @@ crypto_read_low(PslChanFsm* const pFsm,
         "terminating PslError=%d (%s), openSSL state=%d (%s)",
                   __func__, pFsm, cnt, *pNumRead, (int)ioAttempted, pslErrRes,
                   PmSockErrStringFromError(pslErrRes), 
-                  SSL_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
+                  SSL_get_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
 
     return pslErrRes;
 }// crypto_read_low
@@ -3254,7 +3255,7 @@ crypto_write_low(PslChanFsm*    const pFsm,
 
     PSL_LOG_DEBUG("%s (fsm=%p): ENTERING: requested cnt=%d, maxWrCnt=%d, " \
                   "openSSL state=%d (%s)", __func__, pFsm, cnt, maxWriteCnt,
-                  SSL_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
+                  SSL_get_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
 
     PslError pslErrRes = 0; // result error code to be returned
 
@@ -3348,7 +3349,7 @@ crypto_write_low(PslChanFsm*    const pFsm,
         "terminating PslError=%d (%s), openSSL state=%d (%s)",
         __func__, pFsm, *pNumWritten, *pDeferredWriteCnt, pslErrRes,
         PmSockErrStringFromError(pslErrRes),
-        SSL_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
+        SSL_get_state(sslInfo->ssl), SSL_state_string_long(sslInfo->ssl));
 
     return pslErrRes;
 }//crypto_write_low
diff --git a/src/psl_openssl_utils.c b/src/psl_openssl_utils.c
index e901916..0be5c04 100644
--- a/src/psl_openssl_utils.c
+++ b/src/psl_openssl_utils.c
@@ -150,18 +150,18 @@ PmSockOpensslMatchCertInStore(struct x509_store_ctx_st*  const x509StoreCtx,
     /// @see X509_STORE_CTX_get1_issuer + X509_check_issued + X509_cmp
 
     X509_NAME* const subjName = X509_get_subject_name(cert);
-    X509_OBJECT installedObj;
+    X509_OBJECT *installedObj = NULL;
     int const rc = X509_STORE_get_by_subject(x509StoreCtx, X509_LU_X509, subjName,
-                                             &installedObj); 
+                                             installedObj); 
     
     bool matched = false;
 
-    if (X509_LU_X509 == rc && installedObj.data.x509) {
-        matched = (0 == X509_cmp(cert, installedObj.data.x509));
+    if (X509_LU_X509 == rc && X509_OBJECT_get0_X509(installedObj)) {
+        matched = (0 == X509_cmp(cert, X509_OBJECT_get0_X509(installedObj)));
     }
 
     if (X509_LU_FAIL != rc) {
-        X509_OBJECT_free_contents(&installedObj);
+        X509_OBJECT_free(installedObj);
     }
 
     if (X509_LU_X509 != rc) {
@@ -179,7 +179,7 @@ PmSockOpensslMatchCertInStore(struct x509_store_ctx_st*  const x509StoreCtx,
     /**
      * Look through all certs with matching subject names
      */
-    int i = X509_OBJECT_idx_by_subject(x509StoreCtx->ctx->objs, X509_LU_X509, subjName);
+    int i = X509_OBJECT_idx_by_subject(X509_STORE_get0_objects(X509_STORE_CTX_get0_store(x509StoreCtx)), X509_LU_X509, subjName);
     if (-1 == i) {
         PSL_LOG_WARNING("%s (cert=%p): ERROR: X509_OBJECT_idx_by_subject() " \
                         "found no certs with matching subject" \
@@ -188,14 +188,14 @@ PmSockOpensslMatchCertInStore(struct x509_store_ctx_st*  const x509StoreCtx,
         return PSL_ERR_NONE;
     }
 
-    for (; i < sk_X509_OBJECT_num(x509StoreCtx->ctx->objs); i++) {
-        X509_OBJECT* const pObj = sk_X509_OBJECT_value(x509StoreCtx->ctx->objs, i);
+    for (; i < sk_X509_OBJECT_num(X509_STORE_get0_objects(X509_STORE_CTX_get0_store(x509StoreCtx))); i++) {
+        X509_OBJECT* const pObj = sk_X509_OBJECT_value(X509_STORE_get0_objects(X509_STORE_CTX_get0_store(x509StoreCtx)), i);
 
-        if (0 != X509_NAME_cmp(subjName, X509_get_subject_name(pObj->data.x509))) {
+        if (0 != X509_NAME_cmp(subjName, X509_get_subject_name(X509_OBJECT_get0_X509(pObj)))) {
             continue;
         }
 
-        if (0 == X509_cmp(cert, pObj->data.x509)) {
+        if (0 == X509_cmp(cert, X509_OBJECT_get0_X509(pObj))) {
             PSL_LOG_DEBUG("%s (cert=%p): cert found", __func__, cert);
             *pMatchRes = true;
             return PSL_ERR_NONE;
-- 
2.17.0

